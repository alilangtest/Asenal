// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bada_statistics.proto

#ifndef PROTOBUF_bada_5fstatistics_2eproto__INCLUDED
#define PROTOBUF_bada_5fstatistics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bada_5fstatistics_2eproto();
void protobuf_AssignDesc_bada_5fstatistics_2eproto();
void protobuf_ShutdownFile_bada_5fstatistics_2eproto();

class BadaStatistics;

// ===================================================================

class BadaStatistics : public ::google::protobuf::Message {
 public:
  BadaStatistics();
  virtual ~BadaStatistics();

  BadaStatistics(const BadaStatistics& from);

  inline BadaStatistics& operator=(const BadaStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BadaStatistics& default_instance();

  void Swap(BadaStatistics* other);

  // implements Message ----------------------------------------------

  BadaStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BadaStatistics& from);
  void MergeFrom(const BadaStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes topic = 1;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 1;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const void* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // required bytes hostname = 2;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 2;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // required int32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional int32 servererror = 4;
  inline bool has_servererror() const;
  inline void clear_servererror();
  static const int kServererrorFieldNumber = 4;
  inline ::google::protobuf::int32 servererror() const;
  inline void set_servererror(::google::protobuf::int32 value);

  // optional int32 notsupport = 5;
  inline bool has_notsupport() const;
  inline void clear_notsupport();
  static const int kNotsupportFieldNumber = 5;
  inline ::google::protobuf::int32 notsupport() const;
  inline void set_notsupport(::google::protobuf::int32 value);

  // optional int32 othererror = 6;
  inline bool has_othererror() const;
  inline void clear_othererror();
  static const int kOthererrorFieldNumber = 6;
  inline ::google::protobuf::int32 othererror() const;
  inline void set_othererror(::google::protobuf::int32 value);

  // optional int32 getok = 7;
  inline bool has_getok() const;
  inline void clear_getok();
  static const int kGetokFieldNumber = 7;
  inline ::google::protobuf::int32 getok() const;
  inline void set_getok(::google::protobuf::int32 value);

  // optional int32 getnotfound = 8;
  inline bool has_getnotfound() const;
  inline void clear_getnotfound();
  static const int kGetnotfoundFieldNumber = 8;
  inline ::google::protobuf::int32 getnotfound() const;
  inline void set_getnotfound(::google::protobuf::int32 value);

  // optional int32 gettimeout = 9;
  inline bool has_gettimeout() const;
  inline void clear_gettimeout();
  static const int kGettimeoutFieldNumber = 9;
  inline ::google::protobuf::int32 gettimeout() const;
  inline void set_gettimeout(::google::protobuf::int32 value);

  // optional int32 getslow = 10;
  inline bool has_getslow() const;
  inline void clear_getslow();
  static const int kGetslowFieldNumber = 10;
  inline ::google::protobuf::int32 getslow() const;
  inline void set_getslow(::google::protobuf::int32 value);

  // optional float getlatency = 11;
  inline bool has_getlatency() const;
  inline void clear_getlatency();
  static const int kGetlatencyFieldNumber = 11;
  inline float getlatency() const;
  inline void set_getlatency(float value);

  // optional int32 mgetok = 12;
  inline bool has_mgetok() const;
  inline void clear_mgetok();
  static const int kMgetokFieldNumber = 12;
  inline ::google::protobuf::int32 mgetok() const;
  inline void set_mgetok(::google::protobuf::int32 value);

  // optional int32 mgettimeout = 13;
  inline bool has_mgettimeout() const;
  inline void clear_mgettimeout();
  static const int kMgettimeoutFieldNumber = 13;
  inline ::google::protobuf::int32 mgettimeout() const;
  inline void set_mgettimeout(::google::protobuf::int32 value);

  // optional int32 mgetkeylen = 14;
  inline bool has_mgetkeylen() const;
  inline void clear_mgetkeylen();
  static const int kMgetkeylenFieldNumber = 14;
  inline ::google::protobuf::int32 mgetkeylen() const;
  inline void set_mgetkeylen(::google::protobuf::int32 value);

  // optional int32 mgetslow = 15;
  inline bool has_mgetslow() const;
  inline void clear_mgetslow();
  static const int kMgetslowFieldNumber = 15;
  inline ::google::protobuf::int32 mgetslow() const;
  inline void set_mgetslow(::google::protobuf::int32 value);

  // optional float mgetlatency = 16;
  inline bool has_mgetlatency() const;
  inline void clear_mgetlatency();
  static const int kMgetlatencyFieldNumber = 16;
  inline float mgetlatency() const;
  inline void set_mgetlatency(float value);

  // optional int32 setok = 17;
  inline bool has_setok() const;
  inline void clear_setok();
  static const int kSetokFieldNumber = 17;
  inline ::google::protobuf::int32 setok() const;
  inline void set_setok(::google::protobuf::int32 value);

  // optional int32 settimeout = 18;
  inline bool has_settimeout() const;
  inline void clear_settimeout();
  static const int kSettimeoutFieldNumber = 18;
  inline ::google::protobuf::int32 settimeout() const;
  inline void set_settimeout(::google::protobuf::int32 value);

  // optional int32 setslow = 19;
  inline bool has_setslow() const;
  inline void clear_setslow();
  static const int kSetslowFieldNumber = 19;
  inline ::google::protobuf::int32 setslow() const;
  inline void set_setslow(::google::protobuf::int32 value);

  // optional float setlatency = 20;
  inline bool has_setlatency() const;
  inline void clear_setlatency();
  static const int kSetlatencyFieldNumber = 20;
  inline float setlatency() const;
  inline void set_setlatency(float value);

  // optional int32 casok = 21;
  inline bool has_casok() const;
  inline void clear_casok();
  static const int kCasokFieldNumber = 21;
  inline ::google::protobuf::int32 casok() const;
  inline void set_casok(::google::protobuf::int32 value);

  // optional int32 castimeout = 22;
  inline bool has_castimeout() const;
  inline void clear_castimeout();
  static const int kCastimeoutFieldNumber = 22;
  inline ::google::protobuf::int32 castimeout() const;
  inline void set_castimeout(::google::protobuf::int32 value);

  // optional int32 casslow = 23;
  inline bool has_casslow() const;
  inline void clear_casslow();
  static const int kCasslowFieldNumber = 23;
  inline ::google::protobuf::int32 casslow() const;
  inline void set_casslow(::google::protobuf::int32 value);

  // optional float caslatency = 24;
  inline bool has_caslatency() const;
  inline void clear_caslatency();
  static const int kCaslatencyFieldNumber = 24;
  inline float caslatency() const;
  inline void set_caslatency(float value);

  // optional int32 getifallok = 25;
  inline bool has_getifallok() const;
  inline void clear_getifallok();
  static const int kGetifallokFieldNumber = 25;
  inline ::google::protobuf::int32 getifallok() const;
  inline void set_getifallok(::google::protobuf::int32 value);

  // optional int32 getifallnotfoud = 26;
  inline bool has_getifallnotfoud() const;
  inline void clear_getifallnotfoud();
  static const int kGetifallnotfoudFieldNumber = 26;
  inline ::google::protobuf::int32 getifallnotfoud() const;
  inline void set_getifallnotfoud(::google::protobuf::int32 value);

  // optional int32 getifallnotstrict = 27;
  inline bool has_getifallnotstrict() const;
  inline void clear_getifallnotstrict();
  static const int kGetifallnotstrictFieldNumber = 27;
  inline ::google::protobuf::int32 getifallnotstrict() const;
  inline void set_getifallnotstrict(::google::protobuf::int32 value);

  // optional int32 getifallnotenough = 28;
  inline bool has_getifallnotenough() const;
  inline void clear_getifallnotenough();
  static const int kGetifallnotenoughFieldNumber = 28;
  inline ::google::protobuf::int32 getifallnotenough() const;
  inline void set_getifallnotenough(::google::protobuf::int32 value);

  // optional int32 getifalltimeout = 29;
  inline bool has_getifalltimeout() const;
  inline void clear_getifalltimeout();
  static const int kGetifalltimeoutFieldNumber = 29;
  inline ::google::protobuf::int32 getifalltimeout() const;
  inline void set_getifalltimeout(::google::protobuf::int32 value);

  // optional int32 getifallslow = 30;
  inline bool has_getifallslow() const;
  inline void clear_getifallslow();
  static const int kGetifallslowFieldNumber = 30;
  inline ::google::protobuf::int32 getifallslow() const;
  inline void set_getifallslow(::google::protobuf::int32 value);

  // optional float getifalllatency = 31;
  inline bool has_getifalllatency() const;
  inline void clear_getifalllatency();
  static const int kGetifalllatencyFieldNumber = 31;
  inline float getifalllatency() const;
  inline void set_getifalllatency(float value);

  // optional int32 deleteok = 32;
  inline bool has_deleteok() const;
  inline void clear_deleteok();
  static const int kDeleteokFieldNumber = 32;
  inline ::google::protobuf::int32 deleteok() const;
  inline void set_deleteok(::google::protobuf::int32 value);

  // optional int32 deletetimeout = 33;
  inline bool has_deletetimeout() const;
  inline void clear_deletetimeout();
  static const int kDeletetimeoutFieldNumber = 33;
  inline ::google::protobuf::int32 deletetimeout() const;
  inline void set_deletetimeout(::google::protobuf::int32 value);

  // optional int32 deleteslow = 34;
  inline bool has_deleteslow() const;
  inline void clear_deleteslow();
  static const int kDeleteslowFieldNumber = 34;
  inline ::google::protobuf::int32 deleteslow() const;
  inline void set_deleteslow(::google::protobuf::int32 value);

  // optional float deletelatency = 35;
  inline bool has_deletelatency() const;
  inline void clear_deletelatency();
  static const int kDeletelatencyFieldNumber = 35;
  inline float deletelatency() const;
  inline void set_deletelatency(float value);

  // @@protoc_insertion_point(class_scope:BadaStatistics)
 private:
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_servererror();
  inline void clear_has_servererror();
  inline void set_has_notsupport();
  inline void clear_has_notsupport();
  inline void set_has_othererror();
  inline void clear_has_othererror();
  inline void set_has_getok();
  inline void clear_has_getok();
  inline void set_has_getnotfound();
  inline void clear_has_getnotfound();
  inline void set_has_gettimeout();
  inline void clear_has_gettimeout();
  inline void set_has_getslow();
  inline void clear_has_getslow();
  inline void set_has_getlatency();
  inline void clear_has_getlatency();
  inline void set_has_mgetok();
  inline void clear_has_mgetok();
  inline void set_has_mgettimeout();
  inline void clear_has_mgettimeout();
  inline void set_has_mgetkeylen();
  inline void clear_has_mgetkeylen();
  inline void set_has_mgetslow();
  inline void clear_has_mgetslow();
  inline void set_has_mgetlatency();
  inline void clear_has_mgetlatency();
  inline void set_has_setok();
  inline void clear_has_setok();
  inline void set_has_settimeout();
  inline void clear_has_settimeout();
  inline void set_has_setslow();
  inline void clear_has_setslow();
  inline void set_has_setlatency();
  inline void clear_has_setlatency();
  inline void set_has_casok();
  inline void clear_has_casok();
  inline void set_has_castimeout();
  inline void clear_has_castimeout();
  inline void set_has_casslow();
  inline void clear_has_casslow();
  inline void set_has_caslatency();
  inline void clear_has_caslatency();
  inline void set_has_getifallok();
  inline void clear_has_getifallok();
  inline void set_has_getifallnotfoud();
  inline void clear_has_getifallnotfoud();
  inline void set_has_getifallnotstrict();
  inline void clear_has_getifallnotstrict();
  inline void set_has_getifallnotenough();
  inline void clear_has_getifallnotenough();
  inline void set_has_getifalltimeout();
  inline void clear_has_getifalltimeout();
  inline void set_has_getifallslow();
  inline void clear_has_getifallslow();
  inline void set_has_getifalllatency();
  inline void clear_has_getifalllatency();
  inline void set_has_deleteok();
  inline void clear_has_deleteok();
  inline void set_has_deletetimeout();
  inline void clear_has_deletetimeout();
  inline void set_has_deleteslow();
  inline void clear_has_deleteslow();
  inline void set_has_deletelatency();
  inline void clear_has_deletelatency();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* topic_;
  ::std::string* hostname_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 servererror_;
  ::google::protobuf::int32 notsupport_;
  ::google::protobuf::int32 othererror_;
  ::google::protobuf::int32 getok_;
  ::google::protobuf::int32 getnotfound_;
  ::google::protobuf::int32 gettimeout_;
  ::google::protobuf::int32 getslow_;
  float getlatency_;
  ::google::protobuf::int32 mgetok_;
  ::google::protobuf::int32 mgettimeout_;
  ::google::protobuf::int32 mgetkeylen_;
  ::google::protobuf::int32 mgetslow_;
  float mgetlatency_;
  ::google::protobuf::int32 setok_;
  ::google::protobuf::int32 settimeout_;
  ::google::protobuf::int32 setslow_;
  float setlatency_;
  ::google::protobuf::int32 casok_;
  ::google::protobuf::int32 castimeout_;
  ::google::protobuf::int32 casslow_;
  float caslatency_;
  ::google::protobuf::int32 getifallok_;
  ::google::protobuf::int32 getifallnotfoud_;
  ::google::protobuf::int32 getifallnotstrict_;
  ::google::protobuf::int32 getifallnotenough_;
  ::google::protobuf::int32 getifalltimeout_;
  ::google::protobuf::int32 getifallslow_;
  float getifalllatency_;
  ::google::protobuf::int32 deleteok_;
  ::google::protobuf::int32 deletetimeout_;
  ::google::protobuf::int32 deleteslow_;
  float deletelatency_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  friend void  protobuf_AddDesc_bada_5fstatistics_2eproto();
  friend void protobuf_AssignDesc_bada_5fstatistics_2eproto();
  friend void protobuf_ShutdownFile_bada_5fstatistics_2eproto();

  void InitAsDefaultInstance();
  static BadaStatistics* default_instance_;
};
// ===================================================================


// ===================================================================

// BadaStatistics

// required bytes topic = 1;
inline bool BadaStatistics::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BadaStatistics::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BadaStatistics::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BadaStatistics::clear_topic() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& BadaStatistics::topic() const {
  return *topic_;
}
inline void BadaStatistics::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void BadaStatistics::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void BadaStatistics::set_topic(const void* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BadaStatistics::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  return topic_;
}
inline ::std::string* BadaStatistics::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BadaStatistics::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes hostname = 2;
inline bool BadaStatistics::has_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BadaStatistics::set_has_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BadaStatistics::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BadaStatistics::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& BadaStatistics::hostname() const {
  return *hostname_;
}
inline void BadaStatistics::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void BadaStatistics::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void BadaStatistics::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BadaStatistics::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* BadaStatistics::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BadaStatistics::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 timestamp = 3;
inline bool BadaStatistics::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BadaStatistics::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BadaStatistics::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BadaStatistics::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 BadaStatistics::timestamp() const {
  return timestamp_;
}
inline void BadaStatistics::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 servererror = 4;
inline bool BadaStatistics::has_servererror() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BadaStatistics::set_has_servererror() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BadaStatistics::clear_has_servererror() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BadaStatistics::clear_servererror() {
  servererror_ = 0;
  clear_has_servererror();
}
inline ::google::protobuf::int32 BadaStatistics::servererror() const {
  return servererror_;
}
inline void BadaStatistics::set_servererror(::google::protobuf::int32 value) {
  set_has_servererror();
  servererror_ = value;
}

// optional int32 notsupport = 5;
inline bool BadaStatistics::has_notsupport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BadaStatistics::set_has_notsupport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BadaStatistics::clear_has_notsupport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BadaStatistics::clear_notsupport() {
  notsupport_ = 0;
  clear_has_notsupport();
}
inline ::google::protobuf::int32 BadaStatistics::notsupport() const {
  return notsupport_;
}
inline void BadaStatistics::set_notsupport(::google::protobuf::int32 value) {
  set_has_notsupport();
  notsupport_ = value;
}

// optional int32 othererror = 6;
inline bool BadaStatistics::has_othererror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BadaStatistics::set_has_othererror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BadaStatistics::clear_has_othererror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BadaStatistics::clear_othererror() {
  othererror_ = 0;
  clear_has_othererror();
}
inline ::google::protobuf::int32 BadaStatistics::othererror() const {
  return othererror_;
}
inline void BadaStatistics::set_othererror(::google::protobuf::int32 value) {
  set_has_othererror();
  othererror_ = value;
}

// optional int32 getok = 7;
inline bool BadaStatistics::has_getok() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BadaStatistics::set_has_getok() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BadaStatistics::clear_has_getok() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BadaStatistics::clear_getok() {
  getok_ = 0;
  clear_has_getok();
}
inline ::google::protobuf::int32 BadaStatistics::getok() const {
  return getok_;
}
inline void BadaStatistics::set_getok(::google::protobuf::int32 value) {
  set_has_getok();
  getok_ = value;
}

// optional int32 getnotfound = 8;
inline bool BadaStatistics::has_getnotfound() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BadaStatistics::set_has_getnotfound() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BadaStatistics::clear_has_getnotfound() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BadaStatistics::clear_getnotfound() {
  getnotfound_ = 0;
  clear_has_getnotfound();
}
inline ::google::protobuf::int32 BadaStatistics::getnotfound() const {
  return getnotfound_;
}
inline void BadaStatistics::set_getnotfound(::google::protobuf::int32 value) {
  set_has_getnotfound();
  getnotfound_ = value;
}

// optional int32 gettimeout = 9;
inline bool BadaStatistics::has_gettimeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BadaStatistics::set_has_gettimeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BadaStatistics::clear_has_gettimeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BadaStatistics::clear_gettimeout() {
  gettimeout_ = 0;
  clear_has_gettimeout();
}
inline ::google::protobuf::int32 BadaStatistics::gettimeout() const {
  return gettimeout_;
}
inline void BadaStatistics::set_gettimeout(::google::protobuf::int32 value) {
  set_has_gettimeout();
  gettimeout_ = value;
}

// optional int32 getslow = 10;
inline bool BadaStatistics::has_getslow() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BadaStatistics::set_has_getslow() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BadaStatistics::clear_has_getslow() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BadaStatistics::clear_getslow() {
  getslow_ = 0;
  clear_has_getslow();
}
inline ::google::protobuf::int32 BadaStatistics::getslow() const {
  return getslow_;
}
inline void BadaStatistics::set_getslow(::google::protobuf::int32 value) {
  set_has_getslow();
  getslow_ = value;
}

// optional float getlatency = 11;
inline bool BadaStatistics::has_getlatency() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BadaStatistics::set_has_getlatency() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BadaStatistics::clear_has_getlatency() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BadaStatistics::clear_getlatency() {
  getlatency_ = 0;
  clear_has_getlatency();
}
inline float BadaStatistics::getlatency() const {
  return getlatency_;
}
inline void BadaStatistics::set_getlatency(float value) {
  set_has_getlatency();
  getlatency_ = value;
}

// optional int32 mgetok = 12;
inline bool BadaStatistics::has_mgetok() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BadaStatistics::set_has_mgetok() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BadaStatistics::clear_has_mgetok() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BadaStatistics::clear_mgetok() {
  mgetok_ = 0;
  clear_has_mgetok();
}
inline ::google::protobuf::int32 BadaStatistics::mgetok() const {
  return mgetok_;
}
inline void BadaStatistics::set_mgetok(::google::protobuf::int32 value) {
  set_has_mgetok();
  mgetok_ = value;
}

// optional int32 mgettimeout = 13;
inline bool BadaStatistics::has_mgettimeout() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BadaStatistics::set_has_mgettimeout() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BadaStatistics::clear_has_mgettimeout() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BadaStatistics::clear_mgettimeout() {
  mgettimeout_ = 0;
  clear_has_mgettimeout();
}
inline ::google::protobuf::int32 BadaStatistics::mgettimeout() const {
  return mgettimeout_;
}
inline void BadaStatistics::set_mgettimeout(::google::protobuf::int32 value) {
  set_has_mgettimeout();
  mgettimeout_ = value;
}

// optional int32 mgetkeylen = 14;
inline bool BadaStatistics::has_mgetkeylen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BadaStatistics::set_has_mgetkeylen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BadaStatistics::clear_has_mgetkeylen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BadaStatistics::clear_mgetkeylen() {
  mgetkeylen_ = 0;
  clear_has_mgetkeylen();
}
inline ::google::protobuf::int32 BadaStatistics::mgetkeylen() const {
  return mgetkeylen_;
}
inline void BadaStatistics::set_mgetkeylen(::google::protobuf::int32 value) {
  set_has_mgetkeylen();
  mgetkeylen_ = value;
}

// optional int32 mgetslow = 15;
inline bool BadaStatistics::has_mgetslow() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BadaStatistics::set_has_mgetslow() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BadaStatistics::clear_has_mgetslow() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BadaStatistics::clear_mgetslow() {
  mgetslow_ = 0;
  clear_has_mgetslow();
}
inline ::google::protobuf::int32 BadaStatistics::mgetslow() const {
  return mgetslow_;
}
inline void BadaStatistics::set_mgetslow(::google::protobuf::int32 value) {
  set_has_mgetslow();
  mgetslow_ = value;
}

// optional float mgetlatency = 16;
inline bool BadaStatistics::has_mgetlatency() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BadaStatistics::set_has_mgetlatency() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BadaStatistics::clear_has_mgetlatency() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BadaStatistics::clear_mgetlatency() {
  mgetlatency_ = 0;
  clear_has_mgetlatency();
}
inline float BadaStatistics::mgetlatency() const {
  return mgetlatency_;
}
inline void BadaStatistics::set_mgetlatency(float value) {
  set_has_mgetlatency();
  mgetlatency_ = value;
}

// optional int32 setok = 17;
inline bool BadaStatistics::has_setok() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BadaStatistics::set_has_setok() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BadaStatistics::clear_has_setok() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BadaStatistics::clear_setok() {
  setok_ = 0;
  clear_has_setok();
}
inline ::google::protobuf::int32 BadaStatistics::setok() const {
  return setok_;
}
inline void BadaStatistics::set_setok(::google::protobuf::int32 value) {
  set_has_setok();
  setok_ = value;
}

// optional int32 settimeout = 18;
inline bool BadaStatistics::has_settimeout() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BadaStatistics::set_has_settimeout() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BadaStatistics::clear_has_settimeout() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BadaStatistics::clear_settimeout() {
  settimeout_ = 0;
  clear_has_settimeout();
}
inline ::google::protobuf::int32 BadaStatistics::settimeout() const {
  return settimeout_;
}
inline void BadaStatistics::set_settimeout(::google::protobuf::int32 value) {
  set_has_settimeout();
  settimeout_ = value;
}

// optional int32 setslow = 19;
inline bool BadaStatistics::has_setslow() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BadaStatistics::set_has_setslow() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BadaStatistics::clear_has_setslow() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BadaStatistics::clear_setslow() {
  setslow_ = 0;
  clear_has_setslow();
}
inline ::google::protobuf::int32 BadaStatistics::setslow() const {
  return setslow_;
}
inline void BadaStatistics::set_setslow(::google::protobuf::int32 value) {
  set_has_setslow();
  setslow_ = value;
}

// optional float setlatency = 20;
inline bool BadaStatistics::has_setlatency() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BadaStatistics::set_has_setlatency() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BadaStatistics::clear_has_setlatency() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BadaStatistics::clear_setlatency() {
  setlatency_ = 0;
  clear_has_setlatency();
}
inline float BadaStatistics::setlatency() const {
  return setlatency_;
}
inline void BadaStatistics::set_setlatency(float value) {
  set_has_setlatency();
  setlatency_ = value;
}

// optional int32 casok = 21;
inline bool BadaStatistics::has_casok() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BadaStatistics::set_has_casok() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BadaStatistics::clear_has_casok() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BadaStatistics::clear_casok() {
  casok_ = 0;
  clear_has_casok();
}
inline ::google::protobuf::int32 BadaStatistics::casok() const {
  return casok_;
}
inline void BadaStatistics::set_casok(::google::protobuf::int32 value) {
  set_has_casok();
  casok_ = value;
}

// optional int32 castimeout = 22;
inline bool BadaStatistics::has_castimeout() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BadaStatistics::set_has_castimeout() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BadaStatistics::clear_has_castimeout() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BadaStatistics::clear_castimeout() {
  castimeout_ = 0;
  clear_has_castimeout();
}
inline ::google::protobuf::int32 BadaStatistics::castimeout() const {
  return castimeout_;
}
inline void BadaStatistics::set_castimeout(::google::protobuf::int32 value) {
  set_has_castimeout();
  castimeout_ = value;
}

// optional int32 casslow = 23;
inline bool BadaStatistics::has_casslow() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BadaStatistics::set_has_casslow() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BadaStatistics::clear_has_casslow() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BadaStatistics::clear_casslow() {
  casslow_ = 0;
  clear_has_casslow();
}
inline ::google::protobuf::int32 BadaStatistics::casslow() const {
  return casslow_;
}
inline void BadaStatistics::set_casslow(::google::protobuf::int32 value) {
  set_has_casslow();
  casslow_ = value;
}

// optional float caslatency = 24;
inline bool BadaStatistics::has_caslatency() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BadaStatistics::set_has_caslatency() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BadaStatistics::clear_has_caslatency() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BadaStatistics::clear_caslatency() {
  caslatency_ = 0;
  clear_has_caslatency();
}
inline float BadaStatistics::caslatency() const {
  return caslatency_;
}
inline void BadaStatistics::set_caslatency(float value) {
  set_has_caslatency();
  caslatency_ = value;
}

// optional int32 getifallok = 25;
inline bool BadaStatistics::has_getifallok() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BadaStatistics::set_has_getifallok() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BadaStatistics::clear_has_getifallok() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BadaStatistics::clear_getifallok() {
  getifallok_ = 0;
  clear_has_getifallok();
}
inline ::google::protobuf::int32 BadaStatistics::getifallok() const {
  return getifallok_;
}
inline void BadaStatistics::set_getifallok(::google::protobuf::int32 value) {
  set_has_getifallok();
  getifallok_ = value;
}

// optional int32 getifallnotfoud = 26;
inline bool BadaStatistics::has_getifallnotfoud() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BadaStatistics::set_has_getifallnotfoud() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BadaStatistics::clear_has_getifallnotfoud() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BadaStatistics::clear_getifallnotfoud() {
  getifallnotfoud_ = 0;
  clear_has_getifallnotfoud();
}
inline ::google::protobuf::int32 BadaStatistics::getifallnotfoud() const {
  return getifallnotfoud_;
}
inline void BadaStatistics::set_getifallnotfoud(::google::protobuf::int32 value) {
  set_has_getifallnotfoud();
  getifallnotfoud_ = value;
}

// optional int32 getifallnotstrict = 27;
inline bool BadaStatistics::has_getifallnotstrict() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BadaStatistics::set_has_getifallnotstrict() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BadaStatistics::clear_has_getifallnotstrict() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BadaStatistics::clear_getifallnotstrict() {
  getifallnotstrict_ = 0;
  clear_has_getifallnotstrict();
}
inline ::google::protobuf::int32 BadaStatistics::getifallnotstrict() const {
  return getifallnotstrict_;
}
inline void BadaStatistics::set_getifallnotstrict(::google::protobuf::int32 value) {
  set_has_getifallnotstrict();
  getifallnotstrict_ = value;
}

// optional int32 getifallnotenough = 28;
inline bool BadaStatistics::has_getifallnotenough() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BadaStatistics::set_has_getifallnotenough() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BadaStatistics::clear_has_getifallnotenough() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BadaStatistics::clear_getifallnotenough() {
  getifallnotenough_ = 0;
  clear_has_getifallnotenough();
}
inline ::google::protobuf::int32 BadaStatistics::getifallnotenough() const {
  return getifallnotenough_;
}
inline void BadaStatistics::set_getifallnotenough(::google::protobuf::int32 value) {
  set_has_getifallnotenough();
  getifallnotenough_ = value;
}

// optional int32 getifalltimeout = 29;
inline bool BadaStatistics::has_getifalltimeout() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BadaStatistics::set_has_getifalltimeout() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BadaStatistics::clear_has_getifalltimeout() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BadaStatistics::clear_getifalltimeout() {
  getifalltimeout_ = 0;
  clear_has_getifalltimeout();
}
inline ::google::protobuf::int32 BadaStatistics::getifalltimeout() const {
  return getifalltimeout_;
}
inline void BadaStatistics::set_getifalltimeout(::google::protobuf::int32 value) {
  set_has_getifalltimeout();
  getifalltimeout_ = value;
}

// optional int32 getifallslow = 30;
inline bool BadaStatistics::has_getifallslow() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BadaStatistics::set_has_getifallslow() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BadaStatistics::clear_has_getifallslow() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BadaStatistics::clear_getifallslow() {
  getifallslow_ = 0;
  clear_has_getifallslow();
}
inline ::google::protobuf::int32 BadaStatistics::getifallslow() const {
  return getifallslow_;
}
inline void BadaStatistics::set_getifallslow(::google::protobuf::int32 value) {
  set_has_getifallslow();
  getifallslow_ = value;
}

// optional float getifalllatency = 31;
inline bool BadaStatistics::has_getifalllatency() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BadaStatistics::set_has_getifalllatency() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BadaStatistics::clear_has_getifalllatency() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BadaStatistics::clear_getifalllatency() {
  getifalllatency_ = 0;
  clear_has_getifalllatency();
}
inline float BadaStatistics::getifalllatency() const {
  return getifalllatency_;
}
inline void BadaStatistics::set_getifalllatency(float value) {
  set_has_getifalllatency();
  getifalllatency_ = value;
}

// optional int32 deleteok = 32;
inline bool BadaStatistics::has_deleteok() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BadaStatistics::set_has_deleteok() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BadaStatistics::clear_has_deleteok() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BadaStatistics::clear_deleteok() {
  deleteok_ = 0;
  clear_has_deleteok();
}
inline ::google::protobuf::int32 BadaStatistics::deleteok() const {
  return deleteok_;
}
inline void BadaStatistics::set_deleteok(::google::protobuf::int32 value) {
  set_has_deleteok();
  deleteok_ = value;
}

// optional int32 deletetimeout = 33;
inline bool BadaStatistics::has_deletetimeout() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BadaStatistics::set_has_deletetimeout() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BadaStatistics::clear_has_deletetimeout() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BadaStatistics::clear_deletetimeout() {
  deletetimeout_ = 0;
  clear_has_deletetimeout();
}
inline ::google::protobuf::int32 BadaStatistics::deletetimeout() const {
  return deletetimeout_;
}
inline void BadaStatistics::set_deletetimeout(::google::protobuf::int32 value) {
  set_has_deletetimeout();
  deletetimeout_ = value;
}

// optional int32 deleteslow = 34;
inline bool BadaStatistics::has_deleteslow() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BadaStatistics::set_has_deleteslow() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BadaStatistics::clear_has_deleteslow() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BadaStatistics::clear_deleteslow() {
  deleteslow_ = 0;
  clear_has_deleteslow();
}
inline ::google::protobuf::int32 BadaStatistics::deleteslow() const {
  return deleteslow_;
}
inline void BadaStatistics::set_deleteslow(::google::protobuf::int32 value) {
  set_has_deleteslow();
  deleteslow_ = value;
}

// optional float deletelatency = 35;
inline bool BadaStatistics::has_deletelatency() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BadaStatistics::set_has_deletelatency() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BadaStatistics::clear_has_deletelatency() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BadaStatistics::clear_deletelatency() {
  deletelatency_ = 0;
  clear_has_deletelatency();
}
inline float BadaStatistics::deletelatency() const {
  return deletelatency_;
}
inline void BadaStatistics::set_deletelatency(float value) {
  set_has_deletelatency();
  deletelatency_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bada_5fstatistics_2eproto__INCLUDED
